name: Terraform CI/CD

on:
  workflow_dispatch:  
  push:
    branches: [ main ] 

permissions:
  id-token: write       # required for OIDC
  contents: read

env:
  AWS_REGION: sa-east-1 
  TF_WORKING_DIR: infrastructure
  TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
  TF_VAR_db_password: ${{ secrets.DB_PASSWORD }} 

jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    name: "Terraform Plan"
    environment: development

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/flow-ai-role-github-actions
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github-actions-flow-ai-session

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Setup SSH Key for Terraform
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/id_rsa_aws.pub

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -input=false

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan -out=plan.tfplan -input=false

      - name: Upload Terraform Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform_plan
          path: ${{ env.TF_WORKING_DIR }}/plan.tfplan

  terraform-apply:
    runs-on: ubuntu-latest
    name: "Terraform Apply"
    needs: [terraform-plan]
    environment: development 
    
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/flow-ai-role-github-actions
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github-actions-flow-ai-session
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Download Terraform Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform_plan
          path: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -input=false

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve -input=false plan.tfplan

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
        
      - name: Extract IP and Update EC2_HOST Secret via GitHub CLI
        working-directory: ${{ env.TF_WORKING_DIR }} # Required to find state file
        env:
          # Set the GitHub PAT as a local environment variable for the gh command
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          EC2_IP=$(terraform output -json | jq -r '.instance_public_ip.value')
          
          echo "Extracted EC2 IP: $EC2_IP"
          
          gh secret set EC2_HOST -b "$EC2_IP"
